# Lokigo v3
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: grafana
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: grafana
data:
  promtail-config.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    positions:
      filename: /tmp/positions.yaml

    clients:
      - url: http://loki-service:3100/loki/api/v1/push

    scrape_configs:
    - job_name: staros_log
      static_configs:
      - targets:
          - localhost
        labels:
          job: staros_log
          product: 'staros'
          logtype: 'logging'
          __path__: /var/log/staros_log/*log
      pipeline_stages:
      - regex:
          expression: ^(?P<uuid>.*)---(?P<hostname>.*)--- (?P<time>(?:-|\+[0-9]{4}) ---[0-9]{4}-[a-zA-Z]{3}-[0-9]{2}\+[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}) (?P<message>.*$)
      - labels:
          hostname:
          uuid:
      - timestamp:
          source: time
          format: '-0700 ---2006-Jan-02+15:04:05.000'
      - template:
          source: output_msg
          template: '{{ .product }} {{ .hostname }} {{ .message }}'
      - output:
          source: output_msg
    
    - job_name: staros_trap
      static_configs:
      - targets:
          - localhost
        labels:
          job: staros_trap
          product: 'staros'
          logtype: 'trap'
          __path__: /var/log/staros_trap/*log
      pipeline_stages:
      - regex:
          expression: ^(?P<uuid>.*)---(?P<hostname>.*)--- (?P<time>(?:-|\+[0-9]{4}) ---[a-zA-Z]{3} [0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} [0-9]{4}) (?P<message>.*$)
      - labels:
          hostname:
          uuid:
      - timestamp:
          source: time
          format: '-0700 ---Jan 02 15:04:05 2006'
      - template:
          source: output_msg
          template: '{{ .product }} {{ .hostname }} {{ .message }}'
      - output:
          source: output_msg
    
    - job_name: staros_debug
      static_configs:
      - targets:
          - localhost
        labels:
          job: staros_debug
          product: 'staros'
          logtype: 'debug'
          __path__: /var/log/staros_dbgc*/*log
      pipeline_stages:
      - regex:
          expression: ^(?P<uuid>.*)---(?P<hostname>.*)--- (?P<time>(?:-|\+[0-9]{4}) ---[0-9]{4}-[a-zA-Z]{3}-[0-9]{2}\+[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}) (?P<message>.*$)
      - labels:
          hostname:
          uuid:
      - timestamp:
          source: time
          format: '-0700 ---2006-Jan-02+15:04:05.000'
      - template:
          source: output_msg
          template: '{{ .product }} {{ .hostname }} {{ .message }}'
      - output:
          source: output_msg
    
    - job_name: cvim_log
      static_configs:
      - targets:
          - localhost
        labels:
          job: cvim_log
          product: 'cvim'
          logtype: 'logging'
          __path__: /var/log/cvim_log/*log
      pipeline_stages:
      - regex:
          expression: ^(?P<uuid>.*)---(?P<hostname>.*)--- (?P<time>(?:-|\+[0-9]{4}) ---[0-9]{4} [a-zA-Z]{3}.*[0-9]{1,2} [0-9]{2}:[0-9]{2}:[0-9]{2}) [a-zA-Z0-9-_]+ (?P<message>.*$)
      - labels:
          hostname:
          uuid:
      - timestamp:
          source: time
          format: '-0700 ---2006 Jan _2 15:04:05'
      - template:
          source: output_msg
          template: '{{ .product }} {{ .hostname }} {{ .message }}'
      - output:
          source: output_msg
    
    - job_name: ucs_log
      static_configs:
      - targets:
          - localhost
        labels:
          job: ucs_log
          product: 'ucs'
          logtype: 'logging'
          __path__: /var/log/ucs_log/*log
      pipeline_stages:
      - regex:
          expression: ^(?P<uuid>.*)---(?P<hostname>.*)--- (?P<time>(?:-|\+[0-9]{4}) ---[0-9]{4}-[a-zA-Z]{3}-[0-9]{2}\+[0-9]{2}:[0-9]{2}:[0-9]{2}) (?P<message>.*$)
      - labels:
          hostname:
          uuid:
      - timestamp:
          source: time
          format: '-0700 ---2006-Jan-2+15:04:05'
      - template:
          source: output_msg
          template: '{{ .product }} {{ .hostname }} {{ .message }}'
      - output:
          source: output_msg
    
    - job_name: nxos_log
      static_configs:
      - targets:
          - localhost
        labels:
          job: nxos_log
          product: 'nxos'
          logtype: 'logging'
          __path__: /var/log/nxos_log/*log
      pipeline_stages:
      - regex:
          expression: ^(?P<uuid>.*)---(?P<hostname>.*)--- (?P<time>(?:-|\+[0-9]{4}) ---[0-9]{4} [a-zA-Z]{3} [0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}) (?P<message>.*$)
      - labels:
          hostname:
          uuid:
      - timestamp:
          source: time
          format: '-0700 ---2006 Jan 2 15:04:05'
      - template:
          source: output_msg
          template: '{{ .product }} {{ .message }}'
      - output:
          source: output_msg
    
    - job_name: xr_log
      static_configs:
      - targets:
          - localhost
        labels:
          job: xr_log
          product: 'ios_xr'
          logtype: 'logging'
          __path__: /var/log/ios_xr_log/*log
      pipeline_stages:
      - regex:
          expression: ^(?P<uuid>.*)---(?P<hostname>.*)--- (?P<time>(?:-|\+)[0-9]{4} ---[0-9]{4} [a-zA-Z]{3} [0-9]{1,2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}) (?P<message>.*$)
      - labels:
          hostname:
          uuid:
      - timestamp:
          source: time
          format: '-0700 ---2006 Jan _2 15:04:05.000'
      - template:
          source: output_msg
          template: '{{ .product }} {{ .hostname }} {{ .message }}'
      - output:
          source: output_msg
    
    - job_name: iosxe_log
      static_configs:
      - targets:
          - localhost
        labels:
          job: iosxe_log
          product: 'iosxe'
          logtype: 'logging'
          __path__: /var/log/iosxe_log/*log
      pipeline_stages:
      - regex:
          expression: ^(?P<uuid>.*)---(?P<hostname>.*)--- (?P<time>(?:-|\+)[0-9]{4} ---[0-9]{4} [a-zA-Z]{3}.*[0-9]{1,2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}) (?P<message>.*$)
      - labels:
          hostname:
          uuid:
      - timestamp:
          source: time
          format: '-0700 ---2006 Jan _2 15:04:05.000'
      - template:
          source: output_msg
          template: '{{ .product }} {{ .hostname }} {{ .message }}'
      - output:
          source: output_msg


---

apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: loki-config
  namespace: grafana
data:
  loki-config.yaml: |
    auth_enabled: false

    server:
      http_listen_port: 3100

    ingester:
      lifecycler:
        address: 127.0.0.1
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
        final_sleep: 0s
      chunk_idle_period: 1h       # Any chunk not receiving new logs in this time will be flushed
      max_chunk_age: 1h           # All chunks will be flushed when they hit this age, default is 1h
      chunk_target_size: 1048576  # Loki will attempt to build chunks up to 1.5MB, flushing first if chunk_idle_period or max_chunk_age is reached first
      chunk_retain_period: 60m    # Must be greater than index read cache TTL if using an index cache (Default index read cache TTL is 5m)
      max_transfer_retries: 0     # Chunk transfers disabled

    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h

    storage_config:
      boltdb_shipper:
        active_index_directory: /tmp/loki/boltdb-shipper-active
        cache_location: /tmp/loki/boltdb-shipper-cache
        cache_ttl: 24h         # Can be increased for faster performance over longer query periods, uses more disk space
        shared_store: filesystem
      filesystem:
        directory: /tmp/loki/chunks

        #compactor:
        #working_directory: /tmp/loki/boltdb-shipper-compactor
        #shared_store: filesystem

    limits_config:
      reject_old_samples: false
      max_streams_per_user: 100000
      max_entries_limit_per_query: 20000

    chunk_store_config:
      max_look_back_period: 0s

    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s

      #ruler:
      #storage:
      #  type: local
      #  local:
      #    directory: /tmp/loki/rules
      #rule_path: /tmp/loki/rules-temp
      #alertmanager_url: http://localhost:9093
      #ring:
      #  kvstore:
      #    store: inmemory
      #enable_api: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: lokigo
    tier: frontend
  name: lokigo
  namespace: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lokigo
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: lokigo
        tier: frontend
    spec:
      containers:
      - image: tookadacisco/lokigo:prod
        name: lokigo-react
        ports:
        - containerPort: 8089
          name: react-http
          protocol: TCP
        env:
        - name: GRAFANA_ADDRESS
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: GRAFANA_PORT
          value: '30000'
        volumeMounts:
        - name: sidecar
          mountPath: /var/log
        readinessProbe:
          tcpSocket:
            port: 8089
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          tcpSocket:
            port: 8089
          initialDelaySeconds: 30
          periodSeconds: 30
      - args:
        - -config.file=/mnt/config/promtail-config.yaml
        image: grafana/promtail:1.6.0
        name: promtail
        volumeMounts:
        - name: sidecar
          mountPath: /var/log
        - name: config-dir
          mountPath: /mnt/config/
      - args:
        - sh
        - -c
        - while true; do sleep 1h; find /var/log -type f -amin +30 -exec rm {} \;; done
        image: ubuntu:20.04
        name: log-cleaner
        volumeMounts:
        - name: sidecar
          mountPath: /var/log
      volumes:
      - emptyDir: {}
        name: sidecar
      - configMap:
          name: promtail-config
        name: config-dir
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: lokigo
    tier: frontend
  name: lokigo-service
  namespace: grafana
spec:
  ports:
  - port: 8089
    protocol: TCP
    targetPort: react-http
    nodePort: 30089
  selector:
    app: lokigo
    tier: frontend
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: loki
  name: loki
  namespace: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
      tier: middle
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: loki
        tier: middle
    spec:
      volumes:
      - name: loki-config-dir
        configMap:
          name: loki-config
      containers:
      - args:
        - -config.file=/mnt/config/loki-config.yaml
        image: grafana/loki:1.6.0
        name: loki
        ports:
        - containerPort: 3100
          name: loki-http
          protocol: TCP
        volumeMounts:
        - name: loki-config-dir
          mountPath: /mnt/config/
        readinessProbe:
          tcpSocket:
            port: 3100
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          tcpSocket:
            port: 3100
          initialDelaySeconds: 30
          periodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: loki
    tier: middle
  name: loki-service
  namespace: grafana
spec:
  ports:
  - port: 3100
    protocol: TCP
    targetPort: loki-http
  selector:
    app: loki
status:
  loadBalancer: {}
---
apiVersion: v1
data:
  loki-datasource.yaml: |
    apiVersion: 1
    datasources:
    - name: Loki
      url: http://loki-service:3100
      type: loki
      orgId: 1
      access: proxy
      jsonData:
        maxLines: 8000
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: loki-datastore
  namespace: grafana
---
apiVersion: v1
data:
  dashboard.yaml: |
    apiVersion: 1

    providers:
    - name: logparser-dashboard
      orgId: 1
      type: file
      folder: ''
      allowUiUpdates: true
      disableDeletion: false
      updateIntervalSeconds: 10
      editable: true
      options:
        path: /etc/dashboards
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: dashboard-config
  namespace: grafana

---
apiVersion: v1
data:
  logging-dashboard.json: |
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "description": "Universal and flexible dashboard for logging",
      "editable": true,
      "gnetId": 12611,
      "graphTooltip": 0,
      "id": 1,
      "iteration": 1626067493976,
      "links": [],
      "panels": [
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": true,
          "colorValue": true,
          "colors": [
            "rgb(31, 255, 7)",
            "rgb(31, 255, 7)",
            "rgb(31, 255, 7)"
          ],
          "datasource": "Loki",
          "description": "Total  Count of log lines in the specified time range",
          "fieldConfig": {
            "defaults": {},
            "overrides": []
          },
          "format": "short",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 12,
            "x": 0,
            "y": 0
          },
          "id": 11,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "$$hashKey": "object:65",
              "name": "value to text",
              "value": 1
            },
            {
              "$$hashKey": "object:66",
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "pluginVersion": "6.4.3",
          "postfix": " lines",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgb(0, 82, 0)",
            "full": false,
            "lineColor": "rgb(31, 255, 7)",
            "show": true,
            "ymax": null,
            "ymin": null
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "sum(count_over_time(({uuid=\"$uuid\", product=~\"$product\", logtype=~\"$logtype\"})[$__interval]))",
              "hide": false,
              "refId": "A"
            }
          ],
          "thresholds": "10,50",
          "timeFrom": null,
          "timeShift": null,
          "title": "Total  Count of logs",
          "type": "singlestat",
          "valueFontSize": "70%",
          "valueMaps": [
            {
              "$$hashKey": "object:68",
              "op": "=",
              "text": "0",
              "value": "null"
            }
          ],
          "valueName": "total"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": true,
          "colorPrefix": false,
          "colorValue": true,
          "colors": [
            "rgb(222, 15, 43)",
            "rgb(222, 15, 43)",
            "rgb(222, 15, 43)"
          ],
          "datasource": "Loki",
          "description": "Total Count: of $searchable_pattern in the specified time range",
          "fieldConfig": {
            "defaults": {},
            "overrides": []
          },
          "format": "short",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 12,
            "x": 12,
            "y": 0
          },
          "id": 6,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "$$hashKey": "object:1630",
              "name": "value to text",
              "value": 1
            },
            {
              "$$hashKey": "object:1631",
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "pluginVersion": "6.4.3",
          "postfix": " \"$searchable_pattern\"",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgb(105, 34, 43)",
            "full": false,
            "lineColor": "#C4162A",
            "show": true,
            "ymax": null,
            "ymin": null
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "sum(count_over_time(({uuid=\"$uuid\", product=~\"$product\", logtype=~\"$logtype\"} |~ \"(?i)$searchable_pattern\" !~ \"(?i)$ignore_filter\")[$__interval]))",
              "hide": false,
              "refId": "A"
            }
          ],
          "thresholds": "10,50",
          "timeFrom": null,
          "timeShift": null,
          "title": "Total Count: of  $searchable_pattern",
          "type": "singlestat",
          "valueFontSize": "70%",
          "valueMaps": [
            {
              "$$hashKey": "object:1633",
              "op": "=",
              "text": "0",
              "value": "null"
            }
          ],
          "valueName": "total"
        },
        {
          "aliasColors": {},
          "breakPoint": "50%",
          "cacheTimeout": null,
          "combine": {
            "label": "Others",
            "threshold": 0
          },
          "datasource": "Loki",
          "decimals": null,
          "fieldConfig": {
            "defaults": {},
            "overrides": []
          },
          "fontSize": "80%",
          "format": "short",
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 3
          },
          "id": 15,
          "interval": null,
          "legend": {
            "percentage": true,
            "show": true,
            "values": true
          },
          "legendType": "Right side",
          "links": [],
          "nullPointMode": "connected",
          "pieType": "pie",
          "pluginVersion": "7.5.7",
          "strokeWidth": "0.4",
          "targets": [
            {
              "expr": "sum(count_over_time(({uuid=\"$uuid\"})[$__interval])) by (product)",
              "refId": "A"
            }
          ],
          "title": "Product distribution",
          "type": "grafana-piechart-panel",
          "valueName": "total"
        },
        {
          "cacheTimeout": null,
          "datasource": "Loki",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "decimals": 0,
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "short"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 3
          },
          "id": 17,
          "interval": null,
          "links": [],
          "options": {
            "displayLabels": [],
            "legend": {
              "calcs": [],
              "displayMode": "table",
              "placement": "right",
              "values": [
                "value",
                "percent"
              ]
            },
            "pieType": "pie",
            "reduceOptions": {
              "calcs": [
                "sum"
              ],
              "fields": "",
              "values": false
            },
            "text": {}
          },
          "pluginVersion": "7.5.7",
          "targets": [
            {
              "expr": "sum(count_over_time(({uuid=\"$uuid\"})|~ \"(?i)$searchable_pattern\"!~ \"(?i)$ignore_filter\"[$__interval])) by (product)",
              "refId": "A"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Product distribution with $searchable_pattern",
          "type": "piechart"
        },
        {
          "aliasColors": {},
          "bars": true,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Loki",
          "fieldConfig": {
            "defaults": {
              "unit": "short"
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 24,
            "x": 0,
            "y": 11
          },
          "hiddenSeries": false,
          "id": 13,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": false,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.5.7",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(count_over_time(({uuid=\"$uuid\", product=~\"$product\", logtype=~\"$logtype\"} |~ \"(?i)critical\")[$__interval]))",
              "legendFormat": "critical",
              "refId": "A"
            },
            {
              "expr": "sum(count_over_time(({uuid=\"$uuid\", product=~\"$product\", logtype=~\"$logtype\"} |~ \"(?i)error\")[$__interval]))",
              "hide": false,
              "legendFormat": "error",
              "refId": "B"
            },
            {
              "expr": "sum(count_over_time(({uuid=\"$uuid\", product=~\"$product\", logtype=~\"$logtype\"} |~ \"(?i)warning\")[$__interval]))",
              "hide": false,
              "legendFormat": "warning",
              "refId": "C"
            },
            {
              "expr": "sum(count_over_time(({uuid=\"$uuid\", product=~\"$product\", logtype=~\"$logtype\"} |~ \"(?i)unusual\")[$__interval]))",
              "hide": false,
              "legendFormat": "unusual",
              "refId": "D"
            },
            {
              "expr": "sum(count_over_time(({uuid=\"$uuid\", product=~\"$product\", logtype=~\"$logtype\"} |~ \"(?i)info\")[$__interval]))",
              "hide": false,
              "legendFormat": "info",
              "refId": "E"
            },
            {
              "expr": "sum(count_over_time(({uuid=\"$uuid\", product=~\"$product\", logtype=~\"$logtype\"} |~ \"(?i)trace\")[$__interval]))",
              "hide": false,
              "legendFormat": "trace",
              "refId": "F"
            },
            {
              "expr": "sum(count_over_time(({uuid=\"$uuid\", product=~\"$product\", logtype=~\"$logtype\"} |~ \"(?i)debug\")[$__interval]))",
              "hide": false,
              "legendFormat": "debug",
              "refId": "G"
            },
            {
              "expr": "sum(count_over_time(({uuid=\"$uuid\", product=~\"$product\", logtype=~\"$logtype\"})[$__interval]))",
              "hide": false,
              "legendFormat": "all",
              "refId": "H"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Log Level Distribution",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "datasource": "Loki",
          "description": "Live logs is a like 'tail -f' in a real time",
          "fieldConfig": {
            "defaults": {},
            "overrides": []
          },
          "gridPos": {
            "h": 23,
            "w": 24,
            "x": 0,
            "y": 18
          },
          "id": 2,
          "options": {
            "dedupStrategy": "none",
            "showLabels": false,
            "showTime": true,
            "sortOrder": "Descending",
            "wrapLogMessage": false
          },
          "targets": [
            {
              "expr": "{uuid=\"$uuid\", product=~\"$product\", logtype=~\"$logtype\"} |~ \"(?i)$searchable_pattern\" !~ \"(?i)$ignore_filter\"",
              "hide": false,
              "refId": "A"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Consolidated Logs",
          "type": "logs"
        }
      ],
      "refresh": false,
      "schemaVersion": 27,
      "style": "dark",
      "tags": [
        "Loki",
        "logging"
      ],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {
              "selected": false,
              "text": "116c3646-a18c-450e-9abc-680cedbd5843",
              "value": "116c3646-a18c-450e-9abc-680cedbd5843"
            },
            "datasource": "Loki",
            "definition": "label_values({uuid=~\".+\"}, uuid)",
            "description": null,
            "error": null,
            "hide": 0,
            "includeAll": false,
            "label": "uuid",
            "multi": false,
            "name": "uuid",
            "options": [],
            "query": "label_values({uuid=~\".+\"}, uuid)",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {
              "selected": false,
              "text": "All",
              "value": "$__all"
            },
            "datasource": "Loki",
            "definition": "label_values({product=~\".+\"}, product)",
            "description": null,
            "error": null,
            "hide": 0,
            "includeAll": true,
            "label": "product",
            "multi": true,
            "name": "product",
            "options": [],
            "query": "label_values({product=~\".+\"}, product)",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {
              "selected": false,
              "text": "All",
              "value": "$__all"
            },
            "datasource": "Loki",
            "definition": "label_values({logtype=~\".+\"}, logtype)",
            "description": null,
            "error": null,
            "hide": 0,
            "includeAll": true,
            "label": "logtype",
            "multi": true,
            "name": "logtype",
            "options": [],
            "query": "label_values({logtype=~\".+\"}, logtype)",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "current": {
              "selected": false,
              "text": "",
              "value": ""
            },
            "description": null,
            "error": null,
            "hide": 0,
            "label": "Search (case insensitive)",
            "name": "searchable_pattern",
            "options": [
              {
                "selected": true,
                "text": "",
                "value": ""
              }
            ],
            "query": "",
            "skipUrlSync": false,
            "type": "textbox"
          },
          {
            "current": {
              "selected": false,
              "text": "^$",
              "value": "^$"
            },
            "description": null,
            "error": null,
            "hide": 0,
            "label": "Ignore filter (case insensitive)",
            "name": "ignore_filter",
            "options": [
              {
                "selected": true,
                "text": "^$",
                "value": "^$"
              }
            ],
            "query": "^$",
            "skipUrlSync": false,
            "type": "textbox"
          }
        ]
      },
      "time": {
        "from": "now-1y",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ]
      },
      "timezone": "",
      "title": "Logging Dashboard via Loki",
      "uid": "fRIvzUZMz",
      "version": 11
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: dashboard-json
  namespace: grafana

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
    tier: backend
  name: grafana
  namespace: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: grafana
        tier: backend
    spec:
      volumes:
      - configMap:
          name: loki-datastore
        name: datastore
      - configMap:
          name: dashboard-config
        name: dashboard
      - configMap:
          name: dashboard-json
        name: json-config
      containers:
      - image: grafana/grafana:7.5.7
        imagePullPolicy: IfNotPresent
        name: grafana
        ports:
        - containerPort: 3000
          name: http-grafana
          protocol: TCP
        volumeMounts:
        - name: datastore
          mountPath: /etc/grafana/provisioning/datasources
        - name: dashboard
          mountPath: /etc/grafana/provisioning/dashboards
        - name: json-config
          mountPath: /etc/dashboards
        env:
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel"
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /robots.txt
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 3000
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 250m
            memory: 750Mi
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: grafana
  name: grafana-service
  namespace: grafana
spec:
  type: NodePort
  ports:
  - port: 3000
    protocol: TCP
    targetPort: http-grafana
    nodePort: 30000
  selector:
    app: grafana
    tier: backend
status:
  loadBalancer: {}
